#![no_std]

pub mod instructions;
pub mod states;

use pinocchio::pubkey::Pubkey;
use core::mem::MaybeUninit;

// CPMDWBwJDtYax9qW7AyRuVC19Cc4L4Vcy4n2BHAbHkCW
#[cfg(feature = "devnet")]
pub const ID: Pubkey = [
    0xa9, 0x2a, 0x31, 0x1a, 0x88, 0x98, 0x86, 0x4d,
    0x20, 0x63, 0xc8, 0xfc, 0xcb, 0x53, 0x6e, 0x1e,
    0x8a, 0x30, 0x4d, 0x8d, 0x53, 0x98, 0x4c, 0x0a,
    0x4e, 0xb3, 0xc1, 0x44, 0x07, 0xd6, 0x74, 0xe7,
];
//CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C
#[cfg(not(feature = "devnet"))]
pub const ID: Pubkey = [
    0xa9, 0x2a, 0x5a, 0x8b, 0x4f, 0x29, 0x59, 0x52,
    0x84, 0x25, 0x50, 0xaa, 0x93, 0xfd, 0x5b, 0x95,
    0xb5, 0xac, 0xe6, 0xa8, 0xeb, 0x92, 0x0c, 0x93,
    0x94, 0x2e, 0x43, 0x69, 0x0c, 0x20, 0xec, 0x73,
];
pub mod admin {
    use pinocchio::pubkey::Pubkey;
//adMCyoCgfkg7bQiJ9aBJ59H3BXLY3r5LNLfPpQfMzBe
    #[cfg(feature = "devnet")]
    pub const ID: Pubkey = [
        0x08, 0x9d, 0x44, 0x15, 0x87, 0x33, 0xc1, 0xa8,
        0x20, 0x23, 0x5f, 0x6a, 0xb0, 0xf4, 0x34, 0xa2,
        0xbf, 0x22, 0x29, 0x96, 0x2f, 0xdf, 0x19, 0xbf,
        0xc8, 0x96, 0xe7, 0xc8, 0x93, 0x6b, 0xe9, 0x0d,
    ];
//GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ
    #[cfg(not(feature = "devnet"))]
    pub const ID: Pubkey = [
        0xe5, 0xb6, 0x2b, 0x65, 0xcb, 0x3b, 0xbd, 0xa6,
        0xf5, 0x68, 0x88, 0xe6, 0x6f, 0xee, 0x8e, 0x64,
        0xdc, 0x55, 0x60, 0x19, 0x9c, 0x0f, 0x88, 0xb1,
        0x1f, 0xe2, 0x73, 0xbd, 0x05, 0x9e, 0x8a, 0xa1,
    ];
}

pub mod create_pool_fee_reveiver {
    use pinocchio::pubkey::Pubkey;
//G11FKBRaAkHAKuLCgLM6K6NUc9rTjPAznRCjZifrTQe2
    #[cfg(feature = "devnet")]
    pub const ID: Pubkey = [
        0xde, 0xdf, 0x95, 0x3b, 0x2e, 0x71, 0x83, 0x7b,
        0xb5, 0x72, 0xab, 0x09, 0x14, 0x21, 0x99, 0x74,
        0x63, 0xfa, 0x9f, 0x21, 0x96, 0x7c, 0xc2, 0xf5,
        0x03, 0x20, 0x1e, 0x84, 0x15, 0xb3, 0xe4, 0xbf,
    ];
//DNXgeM9EiiaAbaWvwjHj9fQQLAX5ZsfHyvmYUNRAdNC8
    #[cfg(not(feature = "devnet"))]
    pub const ID: Pubkey = [
        0xb7, 0xd0, 0x22, 0x52, 0x54, 0xac, 0x07, 0xe3,
        0xb2, 0xbd, 0x3f, 0x86, 0xc1, 0xf0, 0xf1, 0x10,
        0x3f, 0xc0, 0x70, 0x8c, 0xc1, 0x5a, 0xef, 0x14,
        0x07, 0x3a, 0xa6, 0x45, 0x3f, 0x55, 0xea, 0x69,
    ];
}

pub const AUTH_SEED: &str = "vault_and_lp_mint_auth_seed";

// Helper constants and functions for instruction building
const UNINIT_BYTE: MaybeUninit<u8> = MaybeUninit::<u8>::uninit();

#[inline(always)]
fn write_bytes(destination: &mut [MaybeUninit<u8>], source: &[u8]) {
    for (d, s) in destination.iter_mut().zip(source.iter()) {
        d.write(*s);
    }
}